type Dataset;
type TrainData;
type TestData;
type DataPoint;
type List;
type Tuple;
type Input;
type Output;

def psb2 : Unit = native_import "psb2";
def np : Unit = native_import "numpy";

def load_dataset : (name:String) -> (nTrain:Int) -> (nTest:Int) -> Dataset = native "lambda s: lambda train: lambda test: psb2.fetch_examples('path/to/PSB2/datasets/', s, train, test, format='lists')";

def extract_train_data : (ds:Dataset) -> TrainData = native "lambda ds: ds[0]";

def extract_train_data_datapoint : (ds:TrainData)-> (i:Int) -> DataPoint = native "lambda td: lambda i: td[i]";

def extract_test_data : (ds:Dataset) -> TestData = native "lambda ds: ds[1]";

def extract_data : (dp: DataPoint) -> Tuple = native"lambda datapoint: (datapoint[0], datapoint[1])";

def extract_input : (dp: DataPoint) -> Input = native"lambda dp: dp[0]";

def extract_output : (dp: DataPoint) -> Output = native"lambda dp: dp[1]";

def processed_train_data: (tdata: TrainData) -> List = native "lambda td: list(map(extract_data, td))";

def processed_test_data: (tdata: TestData) -> List = native "lambda td: list(map(extract_data, td))";

def get_int_input: (input : Input) -> (i:Int) -> Int = native "lambda input: lambda i: input[i]";

def get_float_input: (input : Input) -> (i:Int) -> Float = native "lambda input: lambda i: input[i]";

def get_string_input: (input : Input) -> (i:Int) -> String = native "lambda input: lambda i: input[i]";

def mean_square_error : (t : Tuple) ->  Float = native "lambda tuple_predicted_true_values : __import__('numpy').mean(__import__('numpy').square (__import__('numpy').array(tuple_predicted_true_values[0])-  __import__('numpy').array(tuple_predicted_true_values[1])))";
