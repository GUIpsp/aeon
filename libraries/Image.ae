type Unit;
type Image;
type Color;
type ImageDraw;
type Coordinate;

def pil : Unit = native_import "PIL";

def Image_load: (path: String)-> Image = native "lambda i: Image.open(i)";

def Image_create: (weight: {x:Int | 0 < x} ) -> (height:{y:Int | 0 < y}) -> Image = native "lambda i: lambda j: Image.new('RGB', (x, y), color ='white')" ;

def Image_draw: (i : Image) -> ImageDraw = native "lambda i: ImageDraw.Draw(i.copy())";

def Image_makeColor: (r:{x:Int | 0 <= x && x <= 255} ) -> (g:{y:Int | 0 <= y && y <= 255}) -> (b:{z:Int | 0 <= z && z <= 255}) -> Color = uninterpreted;

def Image_cordinate: (x:Int)-> (y1:Int) -> Coordinate = uninterpreted;

def Image_draw_rectangle: (i : ImageDraw) -> (coordinate : Coordinate) -> (color : Color) -> ImageDraw= native "lambda x: lambda y: lambda z: x.copy().rectangle(y, fill=z)";

def Image_diff: (img : Image)-> (img : Image)-> Float = native "lambda x: lambda y: math.sqrt(reduce(operator.add, map(lambda a, b: (a-b)**2, x.histogram(), y.histogram())) / len(x.histogram())) ";

def Image_show: (i : ImageDraw) -> Image = native "lambda x: x.copy().show()";




