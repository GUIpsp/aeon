type Unit;
type Image;
type Color;
type ImageDraw;
type Coordinate;

def pil_Image : Unit = native_import "PIL.Image";

def pil_ImageDraw : Unit = native_import "PIL.ImageDraw";

def dot : (module:Unit) -> (s:String) -> Bottom = native "lambda m: lambda s: getattr(m, s)";

def Image_load: (path: String)-> Image = dot pil_Image "open";

def Image_load2: (path: String)-> Image = native "lambda i: __import__('PIL').Image.open(i)";

def Image_create: (width: Int) -> (height: Int )-> Image = native "lambda i: lambda j: __import__('PIL').Image.new('RGB', (i, j), color ='white')" ;

# def Image_create: (width: {x:Int | 0 < x} ) -> (height:{y:Int | 0 < y}) -> \x -> \y -> curry2 (dot pil_Image "new") "RGB" (x , Y);

def Image_draw: (i : Image) -> ImageDraw = native "lambda i: __import__('PIL').ImageDraw.Draw(i.copy())";

#def Image_makeColor: (r:{x:Int | 0 <= x && x <= 255} ) -> (g:{y:Int | 0 <= y && y <= 255}) -> (b:{z:Int | 0 <= z && z <= 255}) -> Color = uninterpreted;

#def Image_cordinate: (x:Int)-> (y1:Int) -> Coordinate = uninterpreted;

def Image_draw_rectangle: (i : ImageDraw) -> (coordinate : Coordinate) -> (color : Color) -> ImageDraw= native "lambda x: lambda y: lambda z: x.__import__('PIL').ImageDraw.copy().rectangle(y, fill=z)";

def Image_diff: (img : Image)-> (img : Image)-> Float = native "lambda x: lambda y: math.sqrt(reduce(operator.add, map(lambda a, b: (a-b)**2, x.__import__('PIL').Image.histogram(), y.__import__('PIL').Image.histogram())) / len(x.__import__('PIL').Image.histogram())) ";

def Image_show: (i : ImageDraw) -> Image = native "lambda x: x.__import__('PIL').ImageDraw.copy().copy().show()";


#def call_splat :(f : Unit) -> (args: List) = native "lambda f: lambda args: f(*args)";

#def curry2 : (f : Unit) -> (x1: Unit) -> (x2: Unit) = native "lambda f:lambda x1: lambda x2: f(x1,x2)";


