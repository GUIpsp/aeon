import extract_train_data from PSB2;
import get_input_list from PSB2;
import get_output_list from PSB2;
import calculate_list_errors from PSB2;
import get_bowling_synth_values from PSB2;
import unpack_train_data from PSB2;
import load_dataset from PSB2;

type List;

def List_sum : (l:List) -> Int = native "sum";

def List_map: (function: (a: Int) -> Int) ->
                               (l: List) ->
                               List =
    native "lambda f: lambda xs: list(map(f, xs))";


def String_replace : (s:String) -> (t:String) -> (rep:String) -> String = native "lambda x: lambda y: lambda z: x.replace(y, z)";
def String_length: (l:String) -> Int = native "lambda list: len(list)";
def String_get : (l:String) -> (i:Int) -> String = native "lambda l: lambda i: l[i]";
def String_to_int : (s:String) -> Int = native "int";
def String_eq : (s:String) -> (s2:String) -> Bool = native "lambda s: lambda s2: s == s2";

def List_range_step : (start:Int) -> (end:Int) -> (step:Int) -> List = native "lambda s: lambda e: lambda st: list(range(s, e, st))";

def const1 : String = "X";
def const2 : String = "/";

def train: TrainData = extract_train_data (load_dataset "bowling" 200 200);

def input_list : List = get_input_list (unpack_train_data train);

def expected_values : List = get_output_list (unpack_train_data train);

@hide(extract_train_data,
            get_input_list,
            get_output_list,
            unpack_train_data,
            load_dataset,
            train,
            input_list,
            expected_values,
            get_bowling_synth_values,
            calculate_list_errors)
@multi_minimize_float(calculate_list_errors (get_bowling_synth_values input_list synth) expected_values)
def synth (scores: String) : Int {
    (?hole: Int)
 }
