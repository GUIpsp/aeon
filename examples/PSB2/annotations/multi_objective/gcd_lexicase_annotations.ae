# Given two integers, return the largest integer that
# divides each of the integers evenly.
# input : 2 integers in [1, 1000000]
# output : integer
import PSB2;

def gcd ( n:Int, z:Int) : Int {
    if z == 0 then n else (gcd(z)(n % z))
}

def __internal__train: TrainData = __internal__extract_train_data (__internal__load_dataset "gcd" 200 200);
def __internal__input_list : List = __internal__get_input_list (__internal__unpack_train_data __internal__train);
def __internal__expected_values : List = __internal__get_output_list (__internal__unpack_train_data __internal__train);

@multi_minimize_float( __internal__calculate_list_errors (__internal__get_gcd_synth_values __internal__input_list synth) (__internal__expected_values))
def synth ( n:Int, z:Int) : Int {
    (?hole:Int)
}
# def largest_common_divisor ( n :{x:Int | 1 <= x && x <= 1000000},  m :{y:Int | 1 <= y && y <= 1000000}) : Int { gcd n m }
