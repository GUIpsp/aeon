import extract_train_data from PSB2;
import get_input_list from PSB2;
import get_output_list from PSB2;
import calculate_list_errors from PSB2;
import get_dg_synth_values from PSB2;
import unpack_train_data from PSB2;
import load_dataset from PSB2;

type List;

def math : Unit = native_import "math";
def Math_toFloat : (i:Int) -> Float = native "lambda i: float(i)" ;
def Math_max : (i:Int) -> (j:Int) -> Int = native "lambda i: lambda j: max(i,j)" ;
def Math_round : (f:Float) -> (i:Int) -> Float = native "lambda f: lambda i: round(f, i)" ;

# PSB2  functions

def train: TrainData = extract_train_data (load_dataset "dice-game" 200 200);

def input_list : List = get_input_list (unpack_train_data train);

def expected_values : List = get_output_list (unpack_train_data train);

@hide(extract_train_data,
            get_input_list,
            get_output_list,
            unpack_train_data,
            load_dataset,
            train,
            input_list,
            expected_values,
            get_dg_synth_values,
            calculate_list_errors)
@multi_minimize_float(calculate_list_errors (get_dg_synth_values  input_list synth) expected_values)
def synth (n:Int) (m: Int) : Float {
    (?hole: Float)
}
