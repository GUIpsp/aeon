import extract_train_data from PSB2;
import psb2_aeon from PSB2;
import get_input_list from PSB2;
import get_output_list from PSB2;
import calculate_list_difference from PSB2;
import get_is_synth_values from PSB2;
import unpack_train_data from PSB2;
import load_dataset from PSB2;

type List;

def String_len : (i:String) -> Int = native "lambda i: len(i)";

def Range: (start : Int) -> (end : Int) -> (step : Int) -> List = native "lambda start: lambda end: lambda step: list(range(start, end, step ))";

def Filter :  (f: (s:Int) -> Bool) -> (l:List) -> List = native "lambda f: lambda xs: [x for x in xs if f(x)]";

def String_equal : (i:String) -> (j:String) -> Bool = native "lambda i: lambda j: i == j";

def String_slice : (i:String) -> (j:Int) -> (l:Int)-> String = native "lambda i: lambda j: lambda l: i[j:l]" ;


def train: TrainData = extract_train_data (load_dataset "indices-of-substring" 200 200);

def input_list : List = get_input_list (unpack_train_data train);

def expected_values : List = get_output_list (unpack_train_data train);
def flatten_list : (t:List) -> List = native "lambda l: __import__('functools').reduce(lambda x, y: x + y, l)";


@syn_ignore(extract_train_data,
            get_input_list,
            get_output_list,
            unpack_train_data,
            load_dataset,
            get_b_synth_values,
            calculate_list_errors,
            train,
            input_list,
            expected_values,
            flatten_list )
@multi_minimize_float(calculate_list_difference (get_is_synth_values ( input_list) synth) expected_values)
def synth ( text :String) (target: String) : List {
    (?hole:List)
}
