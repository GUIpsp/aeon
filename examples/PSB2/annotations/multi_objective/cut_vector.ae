import extract_train_data from PSB2;
import psb2_aeon from PSB2;
import get_input_list from PSB2;
import get_output_list from PSB2;
import calculate_list_difference from PSB2;
import get_cv_synth_values from PSB2;
import unpack_train_data from PSB2;
import load_dataset from PSB2;

type List;

def itertools : Unit = native_import "itertools";

def Range: (start : Int) -> (end : Int) -> (step : Int) -> List = native "lambda start: lambda end: lambda step: list(range(start, end, step ))";

def List_slice : (i:List) -> (j:Int) -> (l:Int)-> List = native "lambda i: lambda j: lambda l: i[j:l]" ;
def List_remove_last : (i:List) -> List = native "lambda i: i[:-1]";
def List_remove_first : (i:List) -> List = native "lambda i: i[1:]";
def List_reversed: (l: List)-> List = native "lambda xs : xs[::-1]";

def List_length: (l:List) -> Int = native "lambda list: len(list)";
def List_new : List = native "[]" ;
def List_append: (l:List) -> (i: Int) -> List = native "lambda xs: lambda x: xs + [x]";

def Accumulate : (xs:List) -> List = native "lambda xs: list(itertools.accumulate(xs))";
def Zip : (xs:List) -> (ys:List) -> List = native "lambda xs: lambda ys: list(zip(xs, ys))";
def Enumerate : (xs:List) -> List = native "lambda xs: list(enumerate(xs))";
def Map : (f: (s:List) -> List) -> (l:List) -> List = native "lambda f: lambda xs: list(map(f, xs))";
def Math_abs : (i:Int) -> Int = native "lambda i: abs(i)" ;
def Tuple : (i:Int) -> (j:Int) -> List = native "lambda i: lambda j: (i, j)";
def Tuple_list : (i:List) -> (j:List) -> List = native "lambda i: lambda j: [i, j]";
def min_list : (i:List) -> (key: (xs:List) -> Int) -> List = native "lambda i: lambda f: min(i,key=f)";

def get_fst : (i:List) -> Int = native "lambda i: i[0]";
def get_snd : (i:List) -> Int = native "lambda i: i[1] if len(i) > 1 else i[0]";
def get_zip : (i:List) -> List = native "lambda i: i[1]";

#PSB2 functions

def train: TrainData = extract_train_data (load_dataset "cut-vector" 20 20);

def input_list : List = get_input_list (unpack_train_data train);

def expected_values : List = get_output_list (unpack_train_data train);

def flatten_list : (t:List) -> List = native "lambda l: __import__('functools').reduce(lambda x, y: x + y, l)";


@hide(extract_train_data,
            get_input_list,
            get_output_list,
            unpack_train_data,
            load_dataset,
            train,
            input_list,
            expected_values,
            get_cv_synth_values,
            calculate_list_difference,
            flatten_list)
@multi_minimize_float(calculate_list_difference (flatten_list(get_cv_synth_values (flatten_list input_list) synth)) expected_values)
def synth ( ls : List ) : List {
    (?hole:List)
}
