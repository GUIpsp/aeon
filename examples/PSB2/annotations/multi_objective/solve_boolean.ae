import extract_train_data from PSB2;
import psb2_aeon from PSB2;
import get_input_list from PSB2;
import get_output_list from PSB2;
import calculate_list_difference from PSB2;
import get_sbool_synth_values from PSB2;
import unpack_train_data from PSB2;
import load_dataset from PSB2;
type List;

def String_split : (s:String) -> (sep:String) -> List = native "lambda s: lambda sep: s.split(sep, 1)";
def String_concat : (i:String) -> (j:String) -> String = native "lambda i: lambda j: i + j";

def Map_string : (f: (s:String) -> String) -> (l:String) -> String = native "lambda f: lambda xs: str(map(f, xs))";
def String_join : (l:List) -> (s:String) -> String = native "lambda l:lambda s:  s.join(l)";
def String_tail:(l:String) -> String = native "lambda xs: xs[1:]";
def String_contains:(s:String) -> (c:String) -> Bool = native "lambda s: lambda c: c in s";
def String_equal : (i:String) -> (j:String) -> Bool = native "lambda i: lambda j: i == j";
def String_get: (l:String) -> (i:Int) -> String = native "lambda xs: lambda i: xs[i]";
def String_slice: (s:String) -> (start:Int) -> (end:Int) -> String = native "lambda s: lambda start: lambda end: s[start:end]";
def String_length: (s:String) -> Int = native "lambda s: len(s)";
def List_get: (l:List) -> (i:Int) -> String = native "lambda xs: lambda i: xs[i]";


def train: TrainData = extract_train_data (load_dataset "solve-boolean" 200 200);

def input_list : List = get_input_list (unpack_train_data train);

def expected_values : List = get_output_list (unpack_train_data train);
def flatten_list : (t:List) -> List = native "lambda l: __import__('functools').reduce(lambda x, y: x + y, l)";



@multi_minimize_float(calculate_list_difference (get_sbool_synth_values (flatten_list input_list) synth) expected_values)
def synth ( s : String ) : Bool {
    (?hole:Bool);
}
