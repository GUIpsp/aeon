import extract_train_data from PSB2;
import psb2_aeon from PSB2;
import get_input_list from PSB2;
import get_output_list from PSB2;
import calculate_list_difference from PSB2;
import get_l_synth_values from PSB2;
import unpack_train_data from PSB2;
import load_dataset from PSB2;
type List;

def itertools : Unit = native_import "itertools";

def List_reversed: (l: List)-> List = native "lambda xs : xs[::-1]";
def List_new : List = native "[]" ;
def List_append: (l:List) -> (i: Int) -> List = native "lambda xs: lambda x: xs + [x]";
def List_get: (l:List) -> (i:Int) -> Int = native "lambda xs: lambda i: xs[i]";

def Scanl_max : (xs:List) -> List = native "lambda xs: list(itertools.accumulate(xs, max))";
def Filter :  (f: (s:List) -> Bool) -> (l:List) -> List = native "lambda f: lambda xs: [x for x in xs if f(x)]";
def Zip : (xs:List) -> (ys:List) -> List = native "lambda xs: lambda ys: list(zip(xs, ys))";
def Map : (f: (s:List) -> Int) -> (l:List) -> List = native "lambda f: lambda xs: list(map(f, xs))";

#PSB" functions
def train: TrainData = extract_train_data (load_dataset "leaders" 50 50);

def input_list : List = get_input_list (unpack_train_data train);

def expected_values : List = get_output_list (unpack_train_data train);
def flatten_list : (t:List) -> List = native "lambda l: __import__('functools').reduce(lambda x, y: x + y, l)";


@syn_ignore(extract_train_data,
            get_input_list,
            get_output_list,
            unpack_train_data,
            load_dataset,
            get_b_synth_values,
            calculate_list_errors,
            train,
            input_list,
            expected_values,
            flatten_list )
@multi_minimize_float(calculate_list_difference (get_l_synth_values (flatten_list input_list) synth) expected_values)
def synth ( vector : List ) : List {
    (?hole:List)
}
