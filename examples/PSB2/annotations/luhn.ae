type List;
type Range;
type Map;


def List_size: (l:List) -> Int = uninterpreted;
def List_length: (l:List) -> Int = native "lambda list: len(list)";
def List_new : {x:List | List_size(x) == 0} = native "[]" ;
def List_append: (l:List) -> (i: Int) -> {l2:List | List_size(l2) == (List_size(l) + 1)} = native "lambda xs: lambda x: xs + [x]";

def sum: (l:List) -> Int = native "lambda xs: sum(xs)";

def Map_Int_Int_Int_List_Range_List: (function:(a: Int) -> (b:Int) -> Int) -> (l: List) -> (r:Range) -> List = native "lambda f:lambda xs: lambda r: list(map(lambda x, y:f(x)(y), xs, r))";

def Range: (a:Int) ->  (b:Int) -> Range = native "lambda a: lambda b: range(a,b)";

#ToDo refinement input (vector of 16 digits)

def even : (n:Int) -> Bool = \n -> n % 2 == 0;

def map_digit (x:Int, i:Int) : Int {
    #if i % 2 != 0 then ( if x * 2 > 9 then (x*2 - 9) else (x*2) : Int) else x
    if (i % 2 != 0 : Bool) && (x * 2 > 9 : Bool) then 1 else 2
}

def luhn (digits: List) : Int {
    transformed_digits: List = Map_Int_Int_Int_List_Range_List map_digit digits (Range 0 (List_length digits));
    sum transformed_digits

 }
def repeated_list: (n:Int) -> (x:Int) -> List = native "lambda n: lambda x: [x]*n";

def main (args:Int) : Unit {
    print (luhn(repeated_list(16)(9)))
}
