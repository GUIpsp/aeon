type List;
type Range;
type Map;


def List_size: (l:List) -> Int = uninterpreted;
def List_length: (l:List) -> Int = native "lambda list: len(list)";
def List_new : {x:List | List_size(x) == 0} = native "[]" ;
def List_append: (l:List) -> (i: Int) -> {l2:List | List_size(l2) == (List_size(l) + 1)} = native "lambda xs: lambda x: xs + [x]";

def sum: (l:List) -> Int = native "lambda xs: sum(xs)";

def Map_Int_Int_Int_List_Range_List: (function:(a: Int) -> (b:Int) -> Int) -> (l: List) -> (r:Range) -> Map = native "lambda f:lambda xs: lambda r: map(f, xs, r)";
def Map_to_list: (m: Map) -> List = native "lambda m: list(m)";
def Range: (a:Int) ->  (b:Int) -> Range = native "lambda a: lambda b: range(a,b)";

#ToDo refinement input (vector of 16 digits)
def luhn (digits: List) : Int {
    transformed_digits: Map = Map_Int_Int_Int_List_Range_List( (\x -> \y -> if ((y % 2 != 0) && (x * 2 > 9)) then (x * 2 - 9) else (if (y % 2 != 0) then (x*2) else (x))) :(a: Int)-> (b:Int) -> Int) (digits) (Range(0)(List_length(digits)));
    sum( Map_to_list(transformed_digits))

 }
def repeated_list: (n:Int) -> (x:Int) -> List = native "lambda n: lambda x: [x]*n";

def main (args:Int) : Unit {
    print (luhn(repeated_list(16)(9)))
}

#z3.z3types.Z3Exception: b'Sort mismatch at argument #1 for function (declare-fun and (Bool Bool) Bool) supplied sort is Int'
