import String;
import Math;
import PSB2;

def middle_char  (s: String) : String {
    str_len:Int = String_len s;
    if ((str_len % 2) == 0) then
        #snd_mid_char_index: Int = str_len / 2;
        snd_mid_char_index: Int = Math_floor(Math_toFloat(str_len) /. 2.0)+1;
        fst_mid_char_index: Int = snd_mid_char_index - 2 ;
        mid_chars = String_slice s fst_mid_char_index snd_mid_char_index;
        mid_chars
    else
        mid_char_index: Int = Math_floor(Math_toFloat(str_len) /. 2.0);
        m_char = String_slice s mid_char_index (mid_char_index+1);
        m_char

}

def __internal__train: TrainData = __internal__extract_train_data (__internal__load_dataset "middle-character" 200 200);
def __internal__input_list : List = __internal__get_input_list (__internal__unpack_train_data __internal__train);
def __internal__expected_values : List = __internal__get_output_list (__internal__unpack_train_data __internal__train);

@minimize_float(String_distance (__internal__join_string_list(__internal__get_mc_synth_values __internal__input_list synth)) (__internal__join_string_list(__internal__expected_values)))
def synth (s: String) : String {(?hole:String)}
