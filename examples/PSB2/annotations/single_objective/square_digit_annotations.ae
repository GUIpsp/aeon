# Given a positive integer, square each digit and
# concatenate the squares into a returned string.
# input : integer in [0, 1000000]
# output : string


import String;
import Math;
import PSB2;

#def square_digit  ( n :{x:Int | 0 <= x && x <= 1000000}) : String {
#    if n == 0 then
#        ""
#    else
#        digit = n % 10;
#        square = digit * digit;
#        result = String_concat (square_digit(Math_floor_division n 10)) (String_intToString(square));
#        result
#}

def square_digit_unsafe  ( n : Int) : String {
    if n == 0 then
        ""
    else
        digit = n % 10;
        square = digit * digit;
        result = String_concat (square_digit_unsafe(Math_floor_division n 10)) (String_intToString(square));
        result
}

def __internal__train: TrainData = extract_train_data (load_dataset "square-digits" 200 200);
def __internal__input_list : List = get_input_list (unpack_train_data train);
def __internal__expected_values : List = get_output_list (unpack_train_data train);

@minimize_float(String_distance (__internal__join_string_list(__internal__get_sd_synth_values __internal__input_list synth)) (__internal__join_string_list(__internal__  expected_values)))
def synth ( n : Int) : String {(?hole:String)}
