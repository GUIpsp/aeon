import Math;
import PSB2;
#def mult ( n:Int , m:Int ) : Int { n * m }

#def peter_wins: ( n:Int ) -> ( m:Int ) -> Int = \n -> \m-> if m == 0 then 0 else (Math_max 0 (n - m)) + peter_wins n (m - 1);

#def dice_game ( n : {x:Int | 1 <= x && x <= 10000} , m : {y:Int | 1 <= y && y <= 10000}) : Float {
#    Math_toFloat(peter_wins n  m ) /. Math_toFloat(mult n m)  }

def __internal__train: TrainData = __internal__extract_train_data (__internal__load_dataset "dice-game" 200 200);
def __internal__input_list : List = __internal__get_input_list (__internal__unpack_train_data __internal__train);
def __internal__expected_values : List = __internal__get_output_list (__internal__unpack_train_data __internal__train);

@minimize_float(mean_absolute_error  (get_dg_synth_values input_list synth)(expected_values))
def synth ( n : {a:Int | 1 <= a && a <= 10000} , m : {b:Int | 1 <= b && b <= 10000}) : Float
    {
        (?hole:Float)
    }
