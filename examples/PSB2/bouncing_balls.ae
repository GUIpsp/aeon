# Given a starting height and a height after the first
# bounce of a dropped ball, calculate the bounciness
# index (height of first bounce / starting height).
# Then, given a number of bounces, use the bounciness
# index to calculate the total distance that the ball
# travels across those bounces.
# input : float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]
# output : float
# -- working --

import Math;
import PSB2;
type Unit;

#constants
def constant_f0 : Float = 0.0;
def constant_f1 : Float = 1.0;
def constant_f2 : Float = 2.0;

def bounciness_index : (starting_height: {x:Float | 1 <= x && x <= 100} ) -> ( bounce_height:{y:Float | 1 <= y && y <= 100} ) -> Float = \a -> \b-> b /. a;

def calculate_distance_helper : (bounciness_index: Float) -> (height: Float) -> (n: Int) ->  (distance: Float) -> Float =
\b -> \h -> \n-> \d-> if n == 0 then d else calculate_distance_helper b (b *.h) (n-1) (d +. h +. b *.h) ;

def bouncing_balls : (starting_height: {x:Float | 1.0 <= x && x <= 100.0} ) -> ( bounce_height:{y:Float | 1.0 <= y && y <= 100.0} ) -> ( bounces:{z:Int | 1 <= z && z <= 20}) -> Float =
   \a -> \b-> \c -> calculate_distance_helper (bounciness_index a b) a c  0.0 ;


def synth  (a:{x:Float | 1.0 <= x && x <= 100.0} , b:{y:Float | 1.0 <= y && y <= 100.0} ,  c:{z:Int | 1 <= z && z <= 20}) : Float {
(?hole:Float)
}

def fitness () : Float  {
    ds = load_dataset "bouncing-balls" 200 2000;
    train = extract_train_data ds;
    unpacked_data = unpack_train_data train;
    input_list = get_input_list unpacked_data;
    actual_values : List = native "[synth(x)(y)(z) for x, y, z in input_list]";
    expected_values = get_output_list unpacked_data;
    mse = mean_square_error actual_values expected_values;
    mse
}
