# Given a starting height and a height after the first
# bounce of a dropped ball, calculate the bounciness
# index (height of first bounce / starting height).
# Then, given a number of bounces, use the bounciness
# index to calculate the total distance that the ball
# travels across those bounces.
# input : float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]
# output : float
# -- working --

import Math;
type Unit;

def math : Unit = native_import "math";

# ['1.001', '1.0', '1'], ['2.001']

# \x -> \y-> \z -> 2 * x * (1 - Math_pow (y / x))(z) / (1 - (y / x)) causing AssertionError
def bouncing_balls : (starting_height:{x:Int | 1 <= x && x <= 100} ) -> ( bounce_height:{y:Int | 1 <= y && y <= 100} ) -> ( bounces:{z:Int | 1 <= z && z <= 20}) -> Int =
    \a -> \b-> \c -> 2 * a * ((1 - Math_pow (b / a)(c)) / (1 - (b / a)));
    #native "lambda x: lambda y: lambda z: 2 * x * (1 - math.pow((y / x) , z)) / (1 - (y / x))" ;
