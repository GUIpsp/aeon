# Given a starting height and a height after the first
# bounce of a dropped ball, calculate the bounciness
# index (height of first bounce / starting height).
# Then, given a number of bounces, use the bounciness
# index to calculate the total distance that the ball
# travels across those bounces.
# input : float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]
# output : float
# -- working --

import Math;
type Unit;

def math : Unit = native_import "math";

# ['1.001', '1.0', '1'], ['2.001']

# \a -> \b-> \c -> 2 * a * (1 - Math_pow (b / a))(c) / (1 - (b / a)) causing AssertionError float division

def bouncing_balls : (starting_height: {x:Float | 1 <= x && x <= 100} ) -> ( bounce_height:{y:Float | 1 <= y && y <= 100} ) -> ( bounces:{z:Int | 1 <= z && z <= 20}) -> Float =
   \a -> \b-> \c -> Math_toFloat (2 * Math_toInt(a) * (1 - Math_pow (Math_toInt(b /. a)) c ) / Math_ceil(1.0 -. (b /. a)));

def synth  (a:{x:Float | 1 <= x && x <= 100} , b:{y:Float | 1 <= y && y <= 100} ,  c:{z:Int | 1 <= z && z <= 20}) : Float {
    (?hole:Float)
}
