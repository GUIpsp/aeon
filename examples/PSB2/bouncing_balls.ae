# Given a starting height and a height after the first 
# bounce of a dropped ball, calculate the bounciness 
# index (height of first bounce / starting height). 
# Then, given a number of bounces, use the bounciness 
# index to calculate the total distance that the ball 
# travels across those bounces.
# input : float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20] 
# output : float
# --Not yet tested--

type Unit;

def math : Unit = native_import "math";

def bouncing_balls(starting_height:{x:Float | 1 <= x <= 100}) ->  
                    (bounce_height:{y:Float | 1 <= y <= 100}) -> 
                    (bounces:{z:Int | 1 <= z <= 20}) -> Float {

     native "2 * bounce_height * (1 - math.pow((bounce_height / starting_height) , bounces)) / (1 - (bounce_height / starting_height))"  
}