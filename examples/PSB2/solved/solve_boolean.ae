type List;

def String_split : (s:String) -> (sep:String) -> List = native "lambda s: lambda sep: s.split(sep)";
def String_concat : (i:String) -> (j:String) -> String = native "lambda i: lambda j: i + j";

def Map_string : (f: (s:String) -> String) -> (l:String) -> String = native "lambda f: lambda xs: str(map(f, xs))";
def String_join : (l:List) -> (s:String) -> String = native "lambda l:lambda s:  s.join(l)";
def String_tail:(l:String) -> String = native "lambda xs: xs[1:]";
def String_contains:(s:String) -> (c:String) -> Bool = native "lambda s: lambda c: c in s";
def String_equal : (i:String) -> (j:String) -> Bool = native "lambda i: lambda j: i == j";
def List_get: (l:List) -> (i:Int) -> String = native "lambda xs: lambda i: xs[i]";

def solve_boolean ( s : String ) : Bool {
    if (String_equal s "t") then
        true
    else
        if (String_equal s  "f") then
            false
        else
             if (String_contains s  "&") then
                operands: List = String_split s  "&";
                solve_boolean (List_get operands 0) && solve_boolean (List_get operands 1)
             else
                if (String_contains s  "|") then
                    operands: List = String_split s  "|";
                    solve_boolean (List_get operands 0) || solve_boolean (List_get operands 1)
                else
                    false
        }




def main (args:Int) : Unit {
    print(solve_boolean "t&t")
}
