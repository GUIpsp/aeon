type List;

def List_size: (l:List) -> Int = uninterpreted;
def List_length: (l:List) -> Int = native "lambda list: len(list)";
def List_new : {x:List | List_size(x) == 0} = native "[]" ;
def List_append: (l:List) -> (i: Int) -> {l2:List | List_size(l2) == (List_size(l) + 1)} = native "lambda xs: lambda x: xs + [x]";

def sum: (l:List) -> Int = native "lambda xs: sum(xs)";
def Math_max : (i:Int) -> (j:Int) -> Int = native "lambda i: lambda j: max(i,j)" ;
def Math_floor_division : (i:Int) -> (j:Int)-> Int = native "lambda i: lambda j: i // j" ;

def Map_Int_Int_List: (function:(a: Int) -> Int) -> (l: List) -> List = native "lambda f:lambda xs: map(f, xs)";

def fuel_cost  (xs: List) : Int {
 sum(
    Map_Int_Int_List (( \x -> Math_max (Math_floor_division(x)(3) - 2)(0)) : (x: Int) -> Int) (xs)
    )
 }

def main (args:Int) : Unit {
    print(fuel_cost(List_append(List_append(List_new)(1))(9)))
}
