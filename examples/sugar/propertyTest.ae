import List;

def random : Unit = native_import "random";

def generateList : List = native "lambda num_samples=100, max_length=10: [[random.randint(0, 100) for _ in range(random.randint(0, max_length))]for _ in range(num_samples)]" ;

#change this to use the reduce function from List library
def forAllLists : (function:(a: List) -> Bool) -> Float = native "lambda f:  (sum(1 for lst in generateList() if f(lst)) / len(generateList())) * 100";

def reverse (xs: List) : List{
    List_reversed(xs)
}

def main (x:Int) :Unit{
    property_base_test : (xs:List) -> Bool = \xs-> List_length(xs) == List_length(reverse(xs));
    test_result = forAllLists( property_base_test );
    # test_result = forAllLists(\xs-> List_length(xs) == List_length(reverse(xs)));
    print(test_result)
}
