import ..prelude.A

all : T => (arr:A.Array<T>, f: (T) -> Boolean) -> t:Boolean {
   narr:A.Array<Boolean> = A.map(arr, f)
   A.reduce(narr, (i:Boolean, j:Boolean) -> (i && j))
}

any : T => (arr:A.Array<T>, f: (T) -> Boolean) -> t:Boolean {
   narr:A.Array<Boolean> = A.map(arr, f)
   A.reduce(narr, (i:Boolean, j:Boolean) -> (i || j))
}

isDivisible : (a:Integer, b:Integer) -> k:Boolean {
   (a % b) == 0
}

hasDivisibles : (i:Integer, lower:Integer, upper:Integer) -> k:Boolean {
   any(A.range(lower, upper), (k:Integer) -> isDivisible(i, k))
}

prime : (i:Integer) -> t:Boolean where [j > 1 and t == hasDivisibles(i, 2, i)] {
   â€¦
}