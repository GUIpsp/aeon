# http://www.informit.com/articles/article.aspx?p=1807488&seqNum=3
import ..prelude.A

# Define the bit
type Bit {value:Integer} where [ self.values >= 0 and self.values <= 1 ]  as Bit

# Define the data
type Data {bits:A.Array<Bit>} as Data



native Data.obtainBitArray : (data:Data) -> _:A.Array<Bit>

native Data.concatHeader : (data:Data, header:A.Array<Bit>) -> outData:Data where [A.equals(out, A.concat(data, header))]



# Define the kind of existing layers
type LayerH {data : A.Array<Bit>, header : A.Array<Bit>} as Layer
type LayerH {data : A.Array<Bit>} as ApplicationLayer
type LayerH {data : A.Array<Bit>} as TransportLayer
type LayerH {data : A.Array<Bit>} as InternetLayer
type LayerH {data : A.Array<Bit>} as NetworkAccessLayer

native LayerH.getData : (layer:LayerH) -> _:Data

native Layer.applyAppLayer : (data:Data, header:A.Array<Bit>) -> appLayer : ApplicationLayer where [A.equals(appLayer.data, Data.concat(data, header))]

native Layer.applyTranspLayer : (appLayer:ApplicationLayer, header:A.Array<Integer>) -> transpLayer : TransportLayer where [A.equals(transpLayer.data, A.concat(appLayer.data, header))]

native Layer.applyInternetLayer : (internetLayer:InternetLayer, header:A.Array<Integer>) -> internetLayer : InternetLayer where [DATA = CONCAT COM HEADER]

native Layer.applyeNetAccessLayer : (netAccessLayer:NetworkAccessLayer, header:A.Array<Integer>) -> NetworkAccessLayer : NetworkAccessLayer where [DATA = CONCAT COM HEADER]

#### Define the programs ####
sendData : (data : Data, receiver:Program) -> _:NetworkAccessLayer {
    . . .
}

receiveData : (netAccessLayer:NetworkAccessLayer) -> _:Data {
    . . .
}



#### Main method ###
main : (_:Array<String>) -> _:Void {




}
