type Box {status:Integer} where [ self.status >= 0 ] as Bx

native Box.pickBox : () -> b:{Bx where self.status == 0} where [ b.status == 0 ]

native Box.startCode : (o:{Bx where self.status == 0}) -> b:{Bx where self.status == 1} where [ o.status == 0 and b.status == 1 ]

native Box.advance : (o:{Bx where self.status == 1}) -> b:{Bx where self.status == 1} where [ o.status == 1 and b.status == 1 ]

native Box.endCode : (o:{Bx where self.status == 1}) -> b:{Bx where self.status == 2} where [ o.status == 1 and b.status == 2 ]

native Box.isOpen : (b:Bx) -> _:Boolean
native Box.isValid : (b:Bx) -> _:Boolean


native System.out.println : (_:Object) -> _:Void


solve : (b1:{Bx where self.status == 0}) -> b2:{Bx where self.status == 2} where [ Box.isOpen(b2) and Box.isValid(b2) and b2.status == 2 and b1.status == 0 ] {
   â€¦
}


main : (_:Array<String>) -> _:Void {
   b0 = Box.pickBox()
   b1 = Box.startCode(b0)
   b2 = Box.advance(b1)
   b3 = Box.advance(b2)
   b4 = Box.advance(b3)
   b = Box.endCode(b4)

   System.out.println(Box.isOpen(b))
   System.out.println(Box.isValid(b))
}
