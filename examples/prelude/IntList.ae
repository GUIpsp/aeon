type IntList { size : Integer } where [ self.size >= 0 ]

native IntList.array : (size : Integer, o:Integer) -> res:IntList where [ size >= 0 and res.size == size ] 

native IntList.range : (mi : Integer, ma : Integer) -> res:IntList where [ mi <= ma and res.size == (ma - mi)]

native IntList.get : (arr: IntList, index: Integer) -> p:Integer  where [ index >= 0 and index < arr.size ]

native IntList.set : (arr: IntList, index: Integer, value:Integer) -> p:Integer  where [ index >= 0 and index < arr.size ]

native IntList.size : (arr: IntList) -> r:Integer where [ r == arr.size ]

native IntList.forEach : (arr: IntList, f: (Integer) -> Void) -> _:IntList

native IntList.forEachIndex : (arr: IntList, f: (Integer, Integer) -> Void) -> _:IntList

native IntList.map : Integer, Integer => (arr: IntList, f: (Integer) -> Integer) -> out:IntList where [ out.size == arr.size ]

native IntList.copy : (arr: IntList) -> out:IntList where [ out.size == arr.size ]

native IntList.reduce : (arr: IntList, f: (Integer,Integer) -> Integer) -> _:Integer where [ arr.size > 0 ]

native IntList.forAll : (arr: IntList, f: (Integer) -> Boolean) -> _:Boolean

native IntList.append : (arr: IntList, e:Integer) -> out:IntList where [out.size == (arr.size + 1)]

native IntList.randomIntArray : () -> _:IntList