native S.concat : (s1 : String, s2 : String) -> out:String where [ (S.size(out) == (S.size(s1) + S.size(s2))) and
                                                                    S.equals(S.substring(out, 0, S.size(s1)), S.substring(S.size(s1), S.size(s2)))
                                                                 ]

native S.size : (s1 : String) -> out:{Integer where out >= 0}

native S.count : (s1 : String, s2 : String) -> out:Integer

native S.get : (s1 : String, i:Integer) -> _:String

native S.substring : (s1 : String, min:Integer, max:Integer) -> _:String

native S.equals : (s1 : String, s2 : String) -> _:Boolean

native S.foreach : (s1 : String, f : (Integer, String) -> Void) -> _:String
