import ..prelude.J
import ..prelude.A


max : (i:Integer, j:Integer) -> k:Integer { # where [ k >= i and k >= j ]
  J.iif(i > j, () -> i, () -> j)
}

search : (ar:A.Array<Integer>, e:Integer, index:{Integer where (self >= 0) && (self < A.size(ar))}) -> i:Integer {
    J.iif(A.get(ar, index) == e,
          () -> {index},
          () -> {search(ar, e, index + 1)})
}

main : (args:Array<String>) -> _:Void {
   a = A.range(0,1000)
   e = 888
   f = search(a, e, 0)
   J.out(f)
}
