import ..prelude.J
import ..prelude.A


max : (i:Integer, j:Integer) -> k:Integer { # where [ k >= i and k >= j ]
  J.iif(i > j, () -> i, () -> j)
} 

search : (ar:A.Array<Integer>, e:Integer) -> i:Integer {
  inds = A.range(0, A.size(ar))
  b = A.map(inds, (i:Integer) -> J.iif(A.get(ar, i) == e, () -> i, () -> -1 ) )
  A.reduce(b, (i:Integer, j:Integer) -> max(i,j))
} 

main : (args:Array<String>) -> _:Void { 
   a = A.range(0,1000)
	 e = 888
   f = search(a, e)
   J.out(f)
}