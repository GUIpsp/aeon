type IntToInt = (a:Integer) -> Integer;

a : Int = 1;

print : (a:Integer) -> Void = native;
fix : (t:*) => (f:(x:t) -> t) -> t = native;

a : {x:Integer | true} = 1;

(*) : (a:Integer) -> (b:Integer) -> {c:Integer | ((a*b) == c)} = native;
(-) : (a:Integer) -> (b:Integer) -> {c:Integer | ((a-b) == c)} = native;

(==) : (a:Integer) -> (b:Integer) -> {c:Boolean | ((a==b) == c)} = native;

factorial : IntToInt = \ aal:Integer -> if (n == 0) then 1 else (n * factorial (n - 1) );

main : Void = print( factorial(5) );


