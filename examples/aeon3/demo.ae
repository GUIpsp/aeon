// import ../libraries/list;

test : (x:Integer) -> Integer {
    x+1;
    2;
}

asd :() -> Integer {
    x:Integer = 1;
    x+true;
}


aplicaFuncao : (f:(Integer -> Integer)) -> z:Integer {
    print<Integer>(f(9));
    print<Integer>(10);
}

/*
fatorial : (x:Integer) -> Integer {
    x == 0 ? 1 : x * fatorial(x - 1);
}

fibonacci : (x:Integer) -> Integer {
    x == 0 || x == 1 ? x : fibonacci(x - 1) + fibonacci(x - 2);
}


f : ({x:Integer | x > 0}) -> Integer {
    x + 1 > 1 ? 1 : 0;
}


returns_function : () -> f:(Integer -> Integer) {
    (\x:Integer -> x + 1);
}
*/
main : () -> Top {
    
    print<Integer>(1);
    
    print<String>("Result of applying lambda function:");
    1;
/*    aplicaFuncao(\x:Integer -> x + 1);

    
    print("Result of applying a function:");
    aplicaFuncao(test);

    print("Result of function returning function:");
    print(returns_function()(9));

    print("Result of fatorial:");
    print(fatorial(5));

    print("Result of applying fibonacci:");
    print(fibonacci(3));

    print("Result of Application and Abstraction:");
    print((\x : Integer -> x + 1)(4));

    print("Local function f:");
    f : (Integer -> Integer) = \x : Integer -> x + 1;
    print(f(3));

    print("Abstraction with TypeAbstraction and TypeApplication");

    (\x:T -> \y:U -> print(x))<Integer>(10)<Double>(5.0);
    */
}
