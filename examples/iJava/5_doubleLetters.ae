import ..prelude.J
import ..prelude.S

# Adaptacao
# TODO: Ver bug do GP

sum : (i : Integer, j : Integer) -> out:Integer where [out == (i + j)] {
    i + j
}

greaterEqualThan : (i : Integer, j : Integer) -> out:Boolean {
    i >= j
}

# Falta dizer que esta pela mesma ordem
doubleLettersAux : (i:Integer, s1:String, acc:String) ->  out : String where [S.count(s1, S.get(s1, i)) == (2 * S.count(acc, S.get(s1, i)))] {
    â€¦
    ###
    J.iif(
        greaterEqualThan(i, S.size(s1)),
        () -> acc,
        () -> doubleLettersAux(i + 1, s1, S.concat(acc, S.concat(S.get(s1, i), S.get(s1, i))))
    )
    ###
}

doubleLetters : (s1 : String) -> out : String {
    acc : String = ""
    doubleLettersAux(0, s1, acc)
}

main : (_:Array<String>) -> _:Void {
   s1 : String = "ola, este eh um teste!"
   J.out(doubleLetters(s1))
}
