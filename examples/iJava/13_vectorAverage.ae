import ..prelude.J
import ..prelude.A

# Tail recursive
vectorAverage : (index : Integer, acc : Double, arr : A.Array<Double>) -> out : Double where [(out - A.reduce(arr, (l:Float, m:Float) -> l + m)) < 0.0001] {
    # â€¦
    J.iif(
        index == (A.size(arr) - 1),
        () -> (acc + A.get(arr, index)) / A.size(arr),
        () -> vectorAverage(index + 1, acc + A.get(arr, index), arr)
    )
}

main : (_:Array<String>) -> _:Void {
   arr : A.Array<Double> = A.array(5, 2.0)
   arr = A.append(arr, 20.0)
   J.out(vectorAverage(0, 0.0, arr))
}
