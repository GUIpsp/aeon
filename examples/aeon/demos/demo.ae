// import ../libraries/list;

type Person[T, V] {
    age:Person[T, V];
}

test(x:Integer) -> Integer {
    x+1;
    2;
}

asd() -> Integer {
    x:Integer = 1;
    x+1;
}


aplicaFuncao(f:(x:Integer -> Integer)) -> Integer {
    print[Integer](f(9));
    print[Integer](10);
}


fatorial(x:Integer) -> Integer {
    if x == 0 then 1 else x * fatorial(x - 1);
}

fibonacci(x:Integer) -> Integer {
    if x == 0 || x == 1 then x else fibonacci(x - 1) + fibonacci(x - 2);
}


f(x:{x:Integer | x > 0}) -> Integer {
    if x + 1 > 1 then 1 else 0;
}


returns_function() -> (f:Integer -> Integer) {
    (\x:Integer -> x + 1);
}

main() -> Top {
    
    print[Integer](1);
    
    print[String]("Result of applying lambda function:");
    aplicaFuncao(\x:Integer -> x + 1);

   
    print[String]("Result of applying a function:");
    aplicaFuncao(test);

    print[String]("Result of function returning function:");
    print[Integer](returns_function()(9));
    
    print[String]("Result of fatorial:");
    print[Integer](fatorial(5));

    print[String]("Result of applying fibonacci:");
    print[Integer](fibonacci(3));


    print[String]("Result of Application and Abstraction:");
    print[Integer]((\x : Integer -> x + 1)(4));

    print[String]("Local function f:");
    f : (x:Integer -> Integer) = \x : Integer -> x + 1;
    print[Integer](f(3));
    
    print[String]("Abstraction with TypeAbstraction and TypeApplication");

    (\x:T -> \y:U -> print[T](x))[Integer, Double](10, 5.0);    
}
