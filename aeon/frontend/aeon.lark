start : aeon*           -> program

aeon : aeimport         
    | type_alias        
    | type_declaration  
    | definition        
    | ttype             
    | statement


aeimport : "import" (CNAME | PATH) ";"               -> regular_import
    | "import" CNAME "from" (CNAME | PATH) ";"       -> function_import
    
type_alias : "type" TYPE_CNAME "as" ttype ";"       -> type_alias

type_declaration : "type" ttype ";"                 -> regular_type_decl
    | "type" ttype "{" ( CNAME ":" ttype";")+ "}"   -> param_type_decl


ttype : "(" ttype ")"                               -> parens_type
    | TYPE_CNAME                                    -> basic_type
    | "{" CNAME ":" ttype "|" expression "}"        -> refined_type
    | "(" CNAME ":" ttype "->" ttype ")"            -> abstraction_type
    | ttype tabstractions                           -> type_tabstapp

definition : CNAME tabstractions? "(" definition_params? ")" "->" ttype ";"           -> native_definition
    | CNAME tabstractions? "(" definition_params? ")" "->" ttype "{" statement+ "}"   -> regular_definition

tabstractions : "[" ttype ("," ttype)* "]"

definition_params : CNAME ":" ttype ("," CNAME ":" ttype)*

statement : "if" expression "{" statement+ "}" "else" "{" statement+ "}"    -> if_statement
    | CNAME ":" ttype "=" expression ";"                                    -> let_statement
    | CNAME "=" expression ";"                                              -> assign_statement
    | expression ";"                                                        -> expression_statement

expression : expression_dis IMPLIE expression                       -> boolean_expr  
           | expression_dis                                         -> expr

expression_dis : expression_i                                       -> expr
               | expression_i DISJUNCTION expression_dis            -> boolean_expr 

expression_i : "if" expression "then" expression "else" expression  -> if_expr
             | expression_bool (CONJUNCTION | AND) expression_i     -> boolean_expr
             | expression_bool EQUAL expression_i                   -> compare_expr
             | expression_bool DIFF expression_i                    -> compare_expr
             | expression_bool                                      -> expr
              
expression_bool : expression_plus                                   -> expr
                | NOT expression_bool                               -> not_expr  
                | expression_plus LT expression_bool                -> compare_expr
                | expression_plus LTE expression_bool               -> compare_expr
                | expression_plus GT expression_bool                -> compare_expr
                | expression_plus GTE expression_bool               -> compare_expr
                
expression_plus : expression_fact                                   -> expr
                | expression_fact PLUS expression_plus              -> arithmetic_expr
                | expression_fact MINUS expression_plus             -> arithmetic_expr

expression_fact : expression_un                                     -> expr
                | expression_un MULT expression_fact                -> arithmetic_expr
                | expression_un QUOT expression_fact                -> arithmetic_expr
                | expression_un MODULE expression_fact              -> arithmetic_expr

expression_un : expression_b                                        -> expr
              | MINUS expression_un                                 -> minus_expr

expression_b : "(" expression ")"                                   -> parens_expr
    | expression_b tabstractions                                    -> tapplication_expr
    | expression_b "(" parameters? ")"                              -> invocation_expr
    | "\\" CNAME ":" ttype "->" expression                          -> abstraction_expr
    | CNAME ("." CNAME)+                                            -> attribute_expr
    | "?" ttype? "?"                                                -> hole_expr
    | (FLOATLIT | INTLIT | BOOLLIT | STRINGLIT)                     -> literal_expr
    | CNAME                                                         -> variable_expr
    | "@" CNAME "(" parameters? ")"                                 -> improvement_expr


parameters : expression ("," expression)*

// Literals
BOOLLIT.2: "true" | "false"
INTLIT: INT
FLOATLIT: FLOAT
STRINGLIT: ESCAPED_STRING


// Number operations
PLUS: "+"
MINUS: "-"
MULT: "*"
QUOT: "/"
MODULE: "%"

// Logical Operators
AND: "and"
CONJUNCTION: "&&"
DISJUNCTION: "||"
NOT: "!"

// Logical Operators
LT: "<"
LTE: "<="
GT: ">"
GTE: ">="
EQUAL: "=="
DIFF: "!="
IMPLIE: "-->"

CNAME: ("a".."z" /[a-zA-Z0-9_]/*) | "_"    
TYPE_CNAME: "A".."Z" /[a-zA-Z0-9_]/* 

PATH : ((".." | CNAME ) "/")+ CNAME

// Comments
LINE_COMMENT: /\s*/ "//" /[^\n]/*
BLOCK_COMMENT: "/*" /(.|\n)+/ "*/"

%import common.ESCAPED_STRING
%import common.WS
%import common.INT
%import common.FLOAT

%ignore WS
%ignore LINE_COMMENT
%ignore BLOCK_COMMENT
