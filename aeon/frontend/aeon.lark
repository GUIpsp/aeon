start : aeon*           -> program

aeon : aeimport         
    | type_alias        
    | type_declaration  
    | definition        
    | ttype             
    | statement


aeimport : "import" (CNAME | PATH) ";"               -> regular_import
    | "import" CNAME "from" (CNAME | PATH) ";"       -> function_import
    
type_alias : "type" TYPE_CNAME "as" ttype ";"       -> type_alias

type_declaration : "type" ttype ";"                 -> regular_type_decl
    | "type" ttype "{" ( CNAME ":" ttype";")+ "}"   -> param_type_decl


ttype : "(" ttype ")"                               -> parens_type
    | TYPE_CNAME                                    -> basic_type
    | "{" CNAME ":" ttype "|" expression "}"        -> refined_type
    | "(" CNAME ":" ttype "->" ttype ")"            -> abstraction_type
    | ttype tabstractions                           -> type_absapp

definition : CNAME tabstractions? "(" definition_params? ")" "->" ttype ";"           -> native_definition
    | CNAME tabstractions? "(" definition_params? ")" "->" ttype "{" statement+ "}"   -> regular_definition

tabstractions : "[" TYPE_CNAME ("," TYPE_CNAME)* "]"

definition_params : CNAME ":" ttype ("," CNAME ":" ttype)*

statement : "if" expression "{" statement+ "}" "else" "{" statement+ "}"    -> if_statement
    | CNAME ":" ttype "=" expression ";"                                    -> let_statement
    | CNAME "=" expression ";"                                              -> assign_statement
    | expression ";"                                                        -> expression_statement

expression : "(" expression ")"                             -> parens_expr
    | expression tabstractions                              -> tapplication_expr
    | expression "(" parameters? ")"                        -> invocation_expr
    | NOT expression                                        -> not_expr
    | MINUS expression                                      -> minus_expr
    | expression (MULT | QUOT | MODULE) expression          -> arithmetic_expr
    | expression (PLUS | MINUS) expression                  -> arithmetic_expr
    | expression (LT | GT | LTE | GTE) expression           -> compare_expr
    | expression (EQUAL | DIFF) expression                  -> compare_expr
    | expression (CONJUNCTION | AND) expression             -> boolean_expr
    | expression DISJUNCTION expression                     -> boolean_expr
    | expression IMPLIE expression                          -> boolean_expr
    | "\\" CNAME ":" ttype "->" expression                  -> abstraction_expr
    | "if" expression "then" expression "else" expression   -> if_expr
    | CNAME ("." CNAME)+                                    -> attribute_expr
    | "?" ttype? "?"                                        -> hole_expr
    | (FLOATLIT | INTLIT | BOOLLIT | STRINGLIT)             -> literal_expr
    | CNAME                                                 -> variable_expr
    | "@" CNAME "(" parameters? ")"                         -> improvement_expr

parameters : expression ("," expression)*

// Literals
BOOLLIT.2: "true" | "false"
INTLIT: INT
FLOATLIT: FLOAT
STRINGLIT: ESCAPED_STRING


// Number operations
PLUS: "+"
MINUS: "-"
MULT: "*"
QUOT: "/"
MODULE: "%"

// Logical Operators
AND: "and"
CONJUNCTION: "&&"
DISJUNCTION: "||"
NOT: "!"

// Logical Operators
LT: "<"
LTE: "<="
GT: ">"
GTE: ">="
EQUAL: "=="
DIFF: "!="
IMPLIE: "-->"

CNAME: "a".."z" /[a-zA-Z0-9_]/*    
TYPE_CNAME: "A".."Z" /[a-zA-Z0-9_]/* 

PATH : ((".." | CNAME ) "/")+ CNAME

// Comments
LINE_COMMENT: /\s*/ "//" /[^\n]/*
BLOCK_COMMENT: "/*" /(.|\n)+/ "*/"

%import common.ESCAPED_STRING
%import common.WS
%import common.INT
%import common.FLOAT

%ignore WS
%ignore LINE_COMMENT
%ignore BLOCK_COMMENT
