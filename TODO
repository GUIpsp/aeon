automatic:
    ☐ restrict the genetic information in the genetic pool
        we add to much information to the genetic pool. Perhaps restricting the
        information and only allowing subtrees that do not exist will improve the 
        evolution
    ☐ edge case tests in individuals evaluation
    ☐ energy consumption, memory and runtime optimization of the automatic synthesis
        A bit hard to find proper libraries for the energy consumption. We can't get 
        these values from the fitness_utils, must be added when running the candidate program
    ☐ ensure that the continuous fitness function conversion rules are correct
    ☐ evaluate the continuous fitness functions against the step counter and previous rules
    ☐ changed the [(context, holes)] in typing, should change the invocations over genetics 
    ☐ optimization of the synthesized code
        after the final solution is generated, remove dead branches and un-used variables.
    ☐ Maximum function for the evaluation conversor, can't be added to the initial_context
    ☐ add a way to provide genetic control parameters to the program.
    ☐ The phd continuous function does not support forall and exists
        since arrays are not implemented natively, we cannot statically support the continuous
        transformations for the forall and exists fitness functions of the phd 

synthesis:
    ☐ change synthesis refinements based on trials to continuous synthesis
        currently the synthesis is based on trials in order to synthesize programs
        this can be problematic when generating expressions from really restrictive
        types. 
    ☐ se_natives should have a gaussian distributions
    ☐ sometimes generates expressions that do not typecheck
        error: z3.z3types.Z3Exception: True, False or Z3 Boolean expression expected. Received 260
    ☐ probabilities of the synthesis configurations

    ranges:
        ☐ interpret and replace uninterpreted values on conditions during ranging
            call z3 and replace the invocations to uninterpreted functions with the values
        ☐ Deal with discontinuous ranges
            expressions such as, x % 3 == 0 or x % 5 < 3, must be converted into continuous values
        ☐ Call SMT-Solver in case we are not able to synthesize the refinement
        ☐ interesting examples of literal refinements synthesis against the SMT Solver
        ☐ equalize the probability of choosing certain `Or` ranges based on weights
        
typechecker:
    ☐ if restrictions are not properly propagated 
        in some situations the conditions are not taken into consideration in 
        the refinements (e.g. function call with input restricted on if condition)
    ☐ the uninterpreted functions are not being checked 
        for some reason, the uninterpret function restrictions are not checked
        by the SMT, @file(examples/aeon3/strings.ae) and @file(aeon/examples/aeon3/list_demo.ae)
    ☐ Not checking applications properly when they are holes
        if there is a hole as argument, the typechecker is unable to check its type. Some times
        it even replaces its type with None. Check the @file(examples/aeon3/holes.ae), hole15
    ☐ zed context contains a Token(id, a)

    improve error messages:
        ☐ improve node and error messages readability
            already added the translator to improve the messages. Need to improve it further
            by adding more explicit information about the kind of error 
        ☐ add line number and line where the error occurs

libraries:
    ☐ `String` and `List` have the same method names.
        We should either add module that renames method names and allows overloading,
        or, allow shadowing, or, raise exception when this happens
    ☐ include the libraries: `Map`, `Tree`, `IO` and `Text`
    ☐ automatically generate the documentation

frontend:
    ☐ if the last instruction is a definition, it doesnt assign the value and it doesnt typecheck properly
        if the last instruction is of the kind: x:Integer = true; the frontend
        only takes the body and ignores the rest of the assignment. We cannot
        ensure type correctness in this case

    language verifiers: 
        ☐ import cycles
        ☐ undeclared variables and functions
        ☐ undeclared types
        ☐ integer and double bounds

    aeoncore:
        ☐ wrong precendence of boolean operators (equality too)
            example: {x:Integer where x == 0 || (x > 5 && x <= 30)}  ~~~~~> ((== x) ((|| 0) ....))
        ☐ problem with parenthesis
    
    ☐ change the notation of the ternary operator
        currently: cond ? then : otherwise ~~~~> if cond then then else otherwise

    ☐ migrate to Lark
        should actually be check in the typechecker and not frontend

compiler:
    ☐ compile the code to Java

translator:
    ☐ doesnt work properly when the last instruction is the application of an abstraction
        if the functions ends with: (\x : T -> x + 1)(1) then the translation
        doesnt work properly 
    ☐ missing typeabstractions in the type in TypeDeclaration

interpreter:
    ☐ check non-restricted refined types in interpreter

examples:
    ☐ add unit tests for all the modules
    ☐ complete the benchmark synthesis problems.
    ☐ Update all the examples from changing the grammar

others:
    ☐ test units to all modules to ensure that the code is correct
    ☐ deduce of the hole
        this can be done after typechecking

    simplification:
        ☐ simplification buggy on function calls
        ☐ add not progragation function

    ☐ inference of type applications
        can be done during typechecking, but need to be careful not to mess up
        everything else
    ☐ change all the hardcoded instances of `-->`, `&&`, `||`, `==` and `And` 


===============================================================================
Archive:
    automatic:
        ✔ error when generating a program with no input method parameters @done(20-05-09 19:12)
        ✔ I suspect I forgot to update the evaluation context with the program functions @done(20-05-09 19:12)
            sometimes a random error raises in the interpreter when evaluating the program
            Exception: function not in context
        ✔ make tests stop after 5 seconds @done(20-05-09 19:33)
            way to do this
            @link(https://stackoverflow.com/questions/492519/timeout-on-a-function-call)
        ✔ change forall and exists to sum and minimum, respectively @done(20-06-06 04:26)
        ✔ implement the previous continuous fitness function @done(20-06-10 16:45)
            @link(http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.67.2132&rep=rep1&type=pdf) (page 123)
            @link(https://ieeexplore.ieee.org/document/4630793)

    synthesis:    
        ranges:
            ✔ need a better way of obtaining the se_where variable name we are trying to synthesize @done(20-05-30 11:25)
                added static member to RangedContext
            ✔ filter non-restricted refinements from the context.refinements @done(20-05-31 17:27)
                be careful: we dont want to filter the uninterpreted functions
            ✔ convert expression to the CNF form @done(20-06-01 19:59)
            ✔ convert each condition to force the variable on the right side @done(20-06-01 17:32)
                Restrictions should suffer a conversion: x + x > 2    =>    2 * x > 2    =>    x > 1
                Used sympy, does this for me 
            ✔ `&&` and `||` not working with bools @done(20-06-01 17:45)
                or have different probabilities
            ✔ flatten refinements @done(20-05-31 17:47)
            ✘ need semantic analysis to obtain the values for the variables? @cancelled(20-06-06 02:43)
                The only information currently available is obtained from restrictions.
                No need: Just get the variable type from the context.variables and extract the ranges
                then, we call the ranges to obtain a value and replace the value in the expression

    typechecker:
        ✔ include assertions in rules to ensure implementation correctness @done(20-05-24 19:40)
        Check the @file aeon/examples/benchmark/bench3.ae
        ✘ update zed interface using pysmt @cancelled(20-06-03 17:31)
            This might be a slower solution since it introduces a new layer, but allows us
            to experiment different SMT's @link(https://github.com/pysmt/pysmt)

    libraries:
        ✔ create the annotation for documentation @done(20-05-21 10:05)
        ✔ bug in the power[X, Y] @done(20-05-21 10:49)
        ✔ add function conversion from int to float @done(20-05-10 19:06)
        ✔ uninterpreted function for `String` size @done(20-05-10 19:09)
        ✔ default function for `Void` that is `None` @done(20-05-10 19:18)
        ✔ improve refinements of String methods @done(20-05-10 19:35)


    frontend:
        ✔ update hole notation to `??` and `? Integer ?` @done(20-05-21 10:07)
        ✔ update the notation of TypeApplications and TypeAbstractions to `Type[T]` and `Type[Type]` @done(20-05-21 10:08)
        ✔ ghost_variables new parameter in TypeDeclaration @done(20-05-21 11:05)
            the ghost_variables was introduced, no information about what to do with it...
        ✔ refine strings in frontend @done(20-05-10 22:59)
        ✘ raise warning when conditions are always true/false @cancelled(20-05-13 09:24)
            should actually be check in the typechecker and not frontend
        ✔ problem with `-->` priority @done(20-06-06 02:34)
        ✔ support nested ghost variables @done(20-06-06 02:34)
            e.g. {p : Person | p.name.size == 3}, p.name.size ~~~~> String_size(_Person_name(p)) == 3

        aeoncore:
            ✔ Doubles not working @done(20-06-04 11:40)
            ✘ aeoncore still doesnt deal with name.ghost_variable @cancelled(20-06-06 02:34)
                aeoncore is not expected to support this behaviour

    translator:
        ✔ must update the hole notation here @done(20-06-06 02:36)
        ✔ Definitions in funtion body not appearing @done(20-06-11 14:41)
        ✔ Duplicated parameters in function @done(20-06-11 14:45)
        ✔ problem with tabs at if with body @done(20-06-11 14:51)

    others:
        ✔ python logger @done(20-05-12 10:05)
        ✔ Translator from AeonCore to Aeon @done(20-05-13 12:06)
        ✔ update syntax highlighter (create a new git) @done(20-05-21 18:20)
        ✔ reorganize program modules @done(20-05-21 18:20)
