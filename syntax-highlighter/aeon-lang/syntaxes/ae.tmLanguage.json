{
  "fileTypes": [
    "aeon"
  ],
  "firstLineMatch": "^#!/.*\\b\\w*aeon\\b",
  "foldingStartMarker": "/\\*\\*|\\{\\s*$",
  "foldingStopMarker": "\\*\\*/|^\\s*\\}",
  "keyEquivalent": "^~S",
  "repository": {
    "empty-parentheses": {
      "match": "(\\(\\))",
      "captures": {
        "1": {
          "name": "meta.bracket.aeon"
        }
      },
      "name": "meta.parentheses.aeon"
    },
    "imports": {
      "end": "(?<=[\\n;])",
      "begin": "\\b(import)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.import.aeon"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "match": "(given)(?=\\s)",
          "name": "keyword.given.import.aeon"
        },
        {
          "match": "(`[^`]+`|(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+))",
          "name": "entity.name.import.aeon"
        },
        {
          "match": "\\.",
          "name": "punctuation.definition.import"
        },
        {
          "end": "}",
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "meta.bracket.aeon"
            }
          },
          "patterns": [
            {
              "match": "(?x)\\s*(`[^`]+`|(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+))\\s*(=>)\\s*(`[^`]+`|(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+))\\s*",
              "captures": {
                "1": {
                  "name": "entity.name.import.renamed-from.aeon"
                },
                "2": {
                  "name": "keyword.other.arrow.aeon"
                },
                "3": {
                  "name": "entity.name.import.renamed-to.aeon"
                }
              }
            },
            {
              "match": "(given)(\\s+(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+))?(?=\\s*[,}])",
              "captures": {
                "1": {
                  "name": "keyword.given.import.aeon"
                },
                "2": {
                  "name": "entity.name.type.import.aeon"
                }
              }
            },
            {
              "match": "([^\\s.,}]+)",
              "name": "entity.name.import.aeon"
            }
          ],
          "endCaptures": {
            "0": {
              "name": "meta.bracket.aeon"
            }
          },
          "name": "meta.import.selector.aeon"
        }
      ],
      "name": "meta.import.aeon"
    },
    "constants": {
      "patterns": [
        {
          "match": "\\b(false|null|true|Nil|None)\\b",
          "name": "constant.language.aeon"
        },
        {
          "match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.[0-9]+)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?|[0-9]+)([LlFfDd]|UL|ul)?\\b",
          "name": "constant.numeric.aeon"
        },
        {
          "match": "\\b(this|super|self)\\b",
          "name": "variable.language.aeon"
        },
        {
          "match": "\\b(Unit|Boolean|Byte|Char|Short|Integer|String|Float|Long|Double)\\b",
          "name": "storage.type.primitive.aeon"
        },
        {
          "match": "\\b(Symbol)\\b",
          "name": "storage.type.aeon"
        }
      ]
    },
    "script-header": {
      "match": "^#!(.*)$",
      "captures": {
        "1": {
          "name": "string.unquoted.shebang.aeon"
        }
      },
      "name": "comment.block.shebang.aeon"
    },
    "code": {
      "patterns": [
        {
          "include": "#script-header"
        },
        {
          "include": "#storage-modifiers"
        },
        {
          "include": "#declarations"
        },
        {
          "include": "#inheritance"
        },
        {
          "include": "#imports"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#initialization"
        },
        {
          "include": "#xml-literal"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#constants"
        },
        {
          "include": "#aeon-symbol"
        },
        {
          "include": "#aeon-quoted"
        },
        {
          "include": "#char-literal"
        },
        {
          "include": "#empty-parentheses"
        },
        {
          "include": "#parameter-list"
        },
        {
          "include": "#qualifiedClassName"
        },
        {
          "include": "#backQuotedVariable"
        },
        {
          "include": "#meta-brackets"
        },
        {
          "include": "#meta-bounds"
        },
        {
          "include": "#meta-colons"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "end": "\"\"\"(?!\")",
          "begin": "\"\"\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.aeon"
            }
          },
          "patterns": [
            {
              "match": "\\\\\\\\|\\\\u[0-9A-Fa-f]{4}",
              "name": "constant.character.escape.aeon"
            }
          ],
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.aeon"
            }
          },
          "name": "string.quoted.triple.aeon"
        },
        {
          "begin": "\\b([A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}]+)(\"\"\")",
          "end": "\"\"\"(?!\")",
          "beginCaptures": {
            "1": {
              "name": "keyword.interpolation.aeon"
            },
            "2": {
              "name": "string.quoted.triple.interpolated.aeon punctuation.definition.string.begin.aeon"
            }
          },
          "patterns": [
            {
              "include": "#string-interpolation"
            },
            {
              "match": "\\\\\\\\|\\\\u[0-9A-Fa-f]{4}",
              "name": "constant.character.escape.aeon"
            },
            {
              "match": ".",
              "name": "string.quoted.triple.interpolated.aeon"
            }
          ],
          "endCaptures": {
            "0": {
              "name": "string.quoted.triple.interpolated.aeon punctuation.definition.string.end.aeon"
            }
          }
        },
        {
          "end": "\"",
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.aeon"
            }
          },
          "patterns": [
            {
              "match": "\\\\(?:[btnfr\\\\\"']|[0-7]{1,3}|u[0-9A-Fa-f]{4})",
              "name": "constant.character.escape.aeon"
            },
            {
              "match": "\\\\.",
              "name": "invalid.illegal.unrecognized-string-escape.aeon"
            }
          ],
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.aeon"
            }
          },
          "name": "string.quoted.double.aeon"
        },
        {
          "begin": "\\b([A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}]+)(\")",
          "end": "\"",
          "beginCaptures": {
            "1": {
              "name": "keyword.interpolation.aeon"
            },
            "2": {
              "name": "string.quoted.double.interpolated.aeon punctuation.definition.string.begin.aeon"
            }
          },
          "patterns": [
            {
              "include": "#string-interpolation"
            },
            {
              "match": "\\\\(?:[btnfr\\\\\"']|[0-7]{1,3}|u[0-9A-Fa-f]{4})",
              "name": "constant.character.escape.aeon"
            },
            {
              "match": "\\\\.",
              "name": "invalid.illegal.unrecognized-string-escape.aeon"
            },
            {
              "match": ".",
              "name": "string.quoted.double.interpolated.aeon"
            }
          ],
          "endCaptures": {
            "0": {
              "name": "string.quoted.double.interpolated.aeon punctuation.definition.string.end.aeon"
            }
          }
        }
      ]
    },
    "string-interpolation": {
      "patterns": [
        {
          "name": "constant.character.escape.interpolation.aeon",
          "match": "\\$\\$"
        },
        {
          "match": "(\\$)([A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*)",
          "captures": {
            "1": {
              "name": "punctuation.definition.template-expression.begin.aeon"
            }
          }
        },
        {
          "name": "punctuation.definition.template-expression.aeon",
          "begin": "\\$\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.template-expression.begin.aeon"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.template-expression.end.aeon"
            }
          },
          "patterns": [
            {
              "include": "#code"
            }
          ]
        }
      ]
    },
    "xml-entity": {
      "match": "(&)([:a-zA-Z_][:a-zA-Z0-9_.-]*|#[0-9]+|#x[0-9a-fA-F]+)(;)",
      "captures": {
        "1": {
          "name": "punctuation.definition.constant.xml"
        },
        "3": {
          "name": "punctuation.definition.constant.xml"
        }
      },
      "name": "constant.character.entity.xml"
    },
    "xml-singlequotedString": {
      "end": "'",
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.xml"
        }
      },
      "patterns": [
        {
          "include": "#xml-entity"
        }
      ],
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.xml"
        }
      },
      "name": "string.quoted.single.xml"
    },
    "meta-colons": {
      "patterns": [
        {
          "match": "(?<!:):(?!:)",
          "name": "meta.colon.aeon"
        }
      ],
      "comment": "For themes: Matching type colons"
    },
    "keywords": {
      "patterns": [
        {
          "match": "\\b(return|throw)\\b",
          "name": "keyword.control.flow.jump.aeon"
        },
        {
          "match": "\\b(classOf|isInstanceOf|asInstanceOf)\\b",
          "name": "support.function.type-of.aeon"
        },
        {
          "match": "\\b(else|if|then|do|while|for|yield|match|case)\\b",
          "name": "keyword.control.flow.aeon"
        },
        {
          "match": "^\\s*end(?=\\s+(if|while|for|match|(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+))\\s*(//.*|/\\*(?!.*\\*/\\s*\\S.*).*)?$)",
          "name": "keyword.control.flow.end.aeon"
        },
        {
          "match": "\\b(catch|finally|try)\\b",
          "name": "keyword.control.exception.aeon"
        },
        {
          "match": "(==?|!=|<=|>=|<>|<|>)",
          "name": "keyword.operator.comparison.aeon"
        },
        {
          "match": "(\\-|\\+|\\*|/(?![/*])|%|~)",
          "name": "keyword.operator.arithmetic.aeon"
        },
        {
          "match": "(!|&&|\\|\\|)",
          "name": "keyword.operator.logical.aeon"
        },
        {
          "match": "(<-|←|->|→|=>|⇒|\\?|\\:+|@|\\|)+",
          "name": "keyword.operator.aeon"
        }
      ]
    },
    "aeon-quoted": {
      "match": "('\\{|'\\[)(?!')",
      "name": "constant.other.quoted.aeon"
    },
    "xml-doublequotedString": {
      "end": "\"",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.xml"
        }
      },
      "patterns": [
        {
          "include": "#xml-entity"
        }
      ],
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.xml"
        }
      },
      "name": "string.quoted.double.xml"
    },
    "declarations": {
      "patterns": [
        {
          "match": "(?x)\\b\\s+(`[^`]+`|(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+))",
          "captures": {
            "1": {
              "name": "keyword.declaration.aeon"
            },
            "2": {
              "name": "entity.name.function.declaration"
            }
          }
        },
        {
          "match": "\\b(trait)\\s+([^\\s\\{\\(\\[]+)",
          "captures": {
            "1": {
              "name": "keyword.declaration.aeon"
            },
            "2": {
              "name": "entity.name.class.declaration"
            }
          }
        },
        {
          "match": "\\b(?:(case)\\s+)?(class|object)\\s+([^\\s\\{\\(\\[]+)",
          "captures": {
            "1": {
              "name": "keyword.declaration.aeon"
            },
            "2": {
              "name": "keyword.declaration.aeon"
            },
            "3": {
              "name": "entity.name.class.declaration"
            }
          }
        },
        {
          "match": "\\b(type)\\s+(`[^`]+`|(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+))",
          "captures": {
            "1": {
              "name": "keyword.declaration.aeon"
            },
            "2": {
              "name": "entity.name.type.declaration"
            }
          }
        },
        {
          "match": "\\b(val)\\s+([A-Z\\p{Lt}\\p{Lu}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?)\\b",
          "captures": {
            "1": {
              "name": "keyword.declaration.stable.aeon"
            },
            "2": {
              "name": "constant.other.declaration.aeon"
            }
          }
        },
        {
          "match": "\\b(?:(val)|(var))\\s+(?:(`[^`]+`|(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+))|(?=\\())",
          "captures": {
            "1": {
              "name": "keyword.declaration.stable.aeon"
            },
            "2": {
              "name": "keyword.declaration.volatile.aeon"
            },
            "3": {
              "name": "variable.other.declaration.aeon"
            }
          }
        },
        {
          "match": "\\b(package)\\s+(object)\\s+([^\\s\\{\\(\\[]+)",
          "captures": {
            "1": {
              "name": "keyword.other.scoping.aeon"
            },
            "2": {
              "name": "keyword.declaration.aeon"
            },
            "3": {
              "name": "entity.name.class.declaration"
            }
          }
        },
        {
          "end": "(?<=[\\n;])",
          "begin": "\\b(package)\\s+",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.import.aeon"
            }
          },
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "match": "(`[^`]+`|(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+))",
              "name": "entity.name.package.aeon"
            },
            {
              "match": "\\.",
              "name": "punctuation.definition.package"
            }
          ],
          "name": "meta.package.aeon"
        }
      ]
    },
    "char-literal": {
      "end": "'|$",
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.character.begin.aeon"
        }
      },
      "patterns": [
        {
          "match": "\\\\(?:[btnfr\\\\\"']|[0-7]{1,3}|u[0-9A-Fa-f]{4})",
          "name": "constant.character.escape.aeon"
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.unrecognized-character-escape.aeon"
        },
        {
          "match": "[^']{2,}",
          "name": "invalid.illegal.character-literal-too-long"
        },
        {
          "match": "(?<!')[^']",
          "name": "invalid.illegal.character-literal-too-long"
        }
      ],
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.character.end.aeon"
        }
      },
      "name": "string.quoted.other constant.character.literal.aeon"
    },
    "initialization": {
      "match": "\\b(new)\\s+([^\\s,\\{\\}\\(\\)\\[\\]]+)",
      "captures": {
        "1": {
          "name": "keyword.declaration.aeon"
        },
        "2": {
          "name": "entity.name.class"
        }
      }
    },
    "aeon-symbol": {
      "match": "(?>'(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+))(?!')",
      "name": "constant.other.symbol.aeon"
    },
    "meta-brackets": {
      "patterns": [
        {
          "match": "\\{",
          "comment": "The punctuation.section.*.begin is needed for return snippet in source bundle",
          "name": "punctuation.section.block.begin.aeon"
        },
        {
          "match": "\\}",
          "comment": "The punctuation.section.*.end is needed for return snippet in source bundle",
          "name": "punctuation.section.block.end.aeon"
        },
        {
          "match": "{|}|\\(|\\)|\\[|\\]",
          "name": "meta.bracket.aeon"
        }
      ],
      "comment": "For themes: Brackets look nice when colored."
    },
    "qualifiedClassName": {
      "match": "(\\b([A-Z][\\w]*))",
      "captures": {
        "1": {
          "name": "entity.name.class"
        }
      }
    },
    "backQuotedVariable": {
      "match": "`[^`]+`"
    },
    "storage-modifiers": {
      "patterns": [
        {
          "match": "\\b(private\\[\\S+\\]|protected\\[\\S+\\]|private|protected)\\b",
          "name": "storage.modifier.access"
        },
        {
          "match": "\\b(synchronized|@volatile|abstract|final|lazy|sealed|implicit|given|erased|enum|inline |opaque |override|@transient|@native)\\b",
          "name": "storage.modifier.other"
        }
      ]
    },
    "meta-bounds": {
      "match": "<%|=:=|<:<|<%<|>:|<:",
      "comment": "For themes: Matching view bounds",
      "name": "meta.bounds.aeon"
    },
    "comments": {
      "patterns": [
        {
          "include": "#block-comments"
        },
        {
          "end": "(?!\\G)",
          "begin": "(^[ \\t]+)?(?=//)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.aeon"
            }
          },
          "patterns": [
            {
              "end": "\\n",
              "begin": "//",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.aeon"
                }
              },
              "name": "comment.line.double-slash.aeon"
            }
          ]
        }
      ]
    },
    "block-comments": {
      "patterns": [
        {
          "match": "/\\*\\*/",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.aeon"
            }
          },
          "name": "comment.block.empty.aeon"
        },
        {
          "end": "\\*/",
          "begin": "^\\s*(/\\*\\*)(?!/)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.aeon"
            }
          },
          "patterns": [
            {
              "match": "(@param)\\s+(\\S+)",
              "captures": {
                "1": {
                  "name": "keyword.other.documentation.aeondoc.aeon"
                },
                "2": {
                  "name": "variable.parameter.aeon"
                }
              }
            },
            {
              "match": "(@(?:tparam|throws))\\s+(\\S+)",
              "captures": {
                "1": {
                  "name": "keyword.other.documentation.aeondoc.aeon"
                },
                "2": {
                  "name": "entity.name.class"
                }
              }
            },
            {
              "match": "@(return|see|note|example|constructor|usecase|author|version|since|todo|deprecated|migration|define|inheritdoc)\\b",
              "name": "keyword.other.documentation.aeondoc.aeon"
            },
            {
              "match": "(\\[\\[)([^\\]]+)(\\]\\])",
              "captures": {
                "1": {
                  "name": "punctuation.definition.documentation.link.aeon"
                },
                "2": {
                  "name": "string.other.link.title.markdown"
                },
                "3": {
                  "name": "punctuation.definition.documentation.link.aeon"
                }
              }
            },
            {
              "include": "#block-comments"
            }
          ],
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.aeon"
            }
          },
          "name": "comment.block.documentation.aeon"
        },
        {
          "end": "\\*/",
          "begin": "/\\*",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.aeon"
            }
          },
          "patterns": [
            {
              "include": "#block-comments"
            }
          ],
          "name": "comment.block.aeon"
        }
      ]
    },
    "xml-embedded-content": {
      "patterns": [
        {
          "end": "}",
          "begin": "{",
          "patterns": [
            {
              "include": "#code"
            }
          ],
          "captures": {
            "0": {
              "name": "meta.bracket.aeon"
            }
          },
          "name": "meta.source.embedded.aeon"
        },
        {
          "match": " (?:([-_a-zA-Z0-9]+)((:)))?([_a-zA-Z-]+)=",
          "captures": {
            "1": {
              "name": "entity.other.attribute-name.namespace.xml"
            },
            "2": {
              "name": "entity.other.attribute-name.xml"
            },
            "3": {
              "name": "punctuation.separator.namespace.xml"
            },
            "4": {
              "name": "entity.other.attribute-name.localname.xml"
            }
          }
        },
        {
          "include": "#xml-doublequotedString"
        },
        {
          "include": "#xml-singlequotedString"
        }
      ]
    },
    "inheritance": {
      "patterns": [
        {
          "match": "(extends|with|derives)\\s+([^\\s\\{\\(\\[\\]]+)",
          "captures": {
            "1": {
              "name": "keyword.declaration.aeon"
            },
            "2": {
              "name": "entity.other.inherited-class.aeon"
            }
          }
        }
      ]
    },
    "parameter-list": {
      "patterns": [
        {
          "match": "(?<=[^\\._$a-zA-Z0-9])(`[^`]+`|[_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?)\\s*(:)\\s+",
          "captures": {
            "1": {
              "name": "variable.parameter.aeon"
            },
            "2": {
              "name": "meta.colon.aeon"
            }
          }
        }
      ]
    },
    "xml-literal": {
      "patterns": [
        {
          "end": "(>(<))/(?:([-_a-zA-Z0-9]+)((:)))?([-_a-zA-Z0-9:]*[_a-zA-Z0-9])(>)",
          "begin": "(<)((?:([_a-zA-Z0-9][_a-zA-Z0-9]*)((:)))?([_a-zA-Z0-9][-_a-zA-Z0-9:]*))(?=(\\s[^>]*)?></\\2>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.xml"
            },
            "3": {
              "name": "entity.name.tag.namespace.xml"
            },
            "4": {
              "name": "entity.name.tag.xml"
            },
            "5": {
              "name": "punctuation.separator.namespace.xml"
            },
            "6": {
              "name": "entity.name.tag.localname.xml"
            }
          },
          "patterns": [
            {
              "include": "#xml-embedded-content"
            }
          ],
          "comment": "We do not allow a tag name to start with a - since this would likely conflict with the <- operator. This is not very common for tag names anyway.  Also code such as -- if (val <val2 || val> val3) will falsly be recognized as an xml tag.  The solution is to put a space on either side of the comparison operator",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.xml"
            },
            "2": {
              "name": "meta.scope.between-tag-pair.xml"
            },
            "3": {
              "name": "entity.name.tag.namespace.xml"
            },
            "4": {
              "name": "entity.name.tag.xml"
            },
            "5": {
              "name": "punctuation.separator.namespace.xml"
            },
            "6": {
              "name": "entity.name.tag.localname.xml"
            },
            "7": {
              "name": "punctuation.definition.tag.xml"
            }
          },
          "name": "meta.tag.no-content.xml"
        },
        {
          "end": "(/?>)",
          "begin": "(</?)(?:([_a-zA-Z0-9][-_a-zA-Z0-9]*)((:)))?([_a-zA-Z0-9][-_a-zA-Z0-9:]*)(?=[^>]*?>)",
          "patterns": [
            {
              "include": "#xml-embedded-content"
            }
          ],
          "captures": {
            "1": {
              "name": "punctuation.definition.tag.xml"
            },
            "2": {
              "name": "entity.name.tag.namespace.xml"
            },
            "3": {
              "name": "entity.name.tag.xml"
            },
            "4": {
              "name": "punctuation.separator.namespace.xml"
            },
            "5": {
              "name": "entity.name.tag.localname.xml"
            }
          },
          "name": "meta.tag.xml"
        },
        {
          "include": "#xml-entity"
        }
      ]
    }
  },
  "uuid": "158C0929-299A-40C8-8D89-316BE0C446E8",
  "patterns": [
    {
      "include": "#code"
    }
  ],
  "name": "aeon",
  "scopeName": "source.ae"
}